# quarkus.hibernate-orm.database.generation=drop-and-create 
quarkus.datasource.db-kind = postgresql 
quarkus.datasource.username = topicos1
quarkus.datasource.password = 123456
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/topicos1db
# 5432 -> Postgresql rodando por padrão nessa porta. 
# Meu BD e meu sistema web rodando na minha máquina local.
# Se bd rodando em ouitra maquina, colocar ip da outra maquina ao inves de localhost:5432

# Modo dev
%dev.quarkus.hibernate-orm.database.generation=drop-and-create

# Modo de producao - Quando empacotar e rodar
%prod.quarkus.hibernate-orm.database.generation=update
# Quando quarkus está sendo levantado, irá remover os dados do BD e criá-los novamente

# Quarkus mostra as consultas SQL que faz no banco no terminal (gera esse LOG)
quarkus.hibernate-orm.log.sql = false 

# Chave pública e privada
# Gero o Hash a partir da chave privada.
# Posso ler a informação que foi gerada com o hash acima com a minha chave pública
# Token de autorização gerado a partir da chave privada, e então, com a chave pública verifico (descriptogrifo) esse token que eu mesmo gerei. 
mp.jwt.verify.publickey.location = token/publicKey.pem
mp.jwt.verify.issuer = notelab-jwt
smallrye.jwt.sign.key.location = token/privateKey.pem

# Gerar a criptografia e a partir disso a chave pública e privada
# Rodar no terminal
# openssl genrsa -out rsaPrivateKey.pem 2048
# openssl rsa -pubout -in rsaPrivateKey.pem -out publicKey.pem -- Gerar chave publica
# openssl pkcs8 -topk8 -nocrypt -inform pem -in rsaPrivateKey.pem -outform pem -out privateKey.pem -- Gerar chave privada


# Configuracao de LOG
# Gera só os logs de level
quarkus.log.level = INFO

# Só pra essa classe é DEBUG. Hierarquia de LOG. Se colocar DEBUG, aparece DEBUG e INFO. MIN-LEVEL
quarkus.log.category."br.unitins.topicos1".level = DEBUG
# quarkus.log.category."br.unitins.topicos1.resource".level = DEBUG -> Debug apenas para o que está no pacote tópicos 1, para todo o resto é info (coloquei acima)

# configuracao do console LOG
quarkus.console.enabled=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
# Para mostrar apenas no console (Não significa que não gerará os da linha 32)
quarkus.log.console.level = DEBUG

# Configuracao do log em arquivos
# quarkus.log.file.enable = TRUE
# Log da ultima hora, depois que passar, manda pra outro arquivo (linha 51). Ai manda pra outro arquivo e limpa esse
quarkus.log.file.path = /tmp/log_tp1_2024.log
quarkus.log.file.level = DEBUG
quarkus.log.file.format = %d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
# Gera log a cada minuto (nome inicial é do path, nome final é a hora e minuto)
quarkus.log.file.rotation.file-suffix = dd-MM-yyyy-HH-mm

quarkus.log.handler.gelf.enabled=true
quarkus.log.handler.gelf.host=localhost
quarkus.log.handler.gelf.port=1514

quarkus.scheduler.enabled=true