@startuml uml

class Pedido {
    - id: Long
    - data: LocalDateTime
    - total: Double
}

class ItemPedido {
    - id: Long
    - preco: Double
    - quantidade: Integer
}

enum Status {
    + AGUARDANDO_PAGAMENTO: int
    + PAGAMENTO_NÃO_AUTORIZADO: int
    + PAGAMENTO_AUTORIZADO: int
    + SEPARADO_DO_ESTOQUE: int
    + ENTREGUE_A_TRANSPORTADORA: int
    + ENTREGUE: int
    + DESISTIDO: int
    + DEVOLVIDO: int
}

class StatusPedido {
    - id: Long
    - dataAtualizacao: LocalDateTime
}

class Cupom {
    - id: Long
    - codigo: String
    - percentualDesconto: Float
    - dataValidade: LocalDateTime
}

class Pessoa {
    - id: Long
    - nome: String
    - dataNascimento: LocalDate
    - cpf: String
}

class Cliente {
    - id: Long
    - aceitaMarketing: boolean
}

class Funcionario {
    - id: Long
    - dataContrato: LocalDate
    - salario: Double
}

class Usuario {
    - id: Long
    - email: String
    - senha: String
}

enum Sexo {
    + MASCULINO: int
    + FEMININO: int
}

class Endereco {
    - id: Long
    - cep: String
    - logradouro: String
    - bairro: String
    - numero: int
    - complemento: String
}

class Cidade {
    - id: Long
    - nome: String
}

class Estado {
    - id: Long
    - nome: String
}

class Telefone {
    - id: Long
    - codigoArea: String
    - numero: String
}

class Notebook {
    - id: Long
    - descricao: String
    - linha: String 
    - serie: String
    - preco: Double
    - modelo: String
    - sistemaOperacional: String
    - isGamer: Boolean
    - entradaUsb: Integer
    - limiteRam: String
    - estoque: Integer
} 

' Notebook --> Fornecedor. Se colocasse ao contrário, toda vez que fosse cadastrar o fornecedor, teria que
' cadastrar os notebooks também.
class Fornecedor {
    - id: Long
    - nome: String
    - email: String
    - cnpj: String
}

enum TipoPlacaVideo {
    + INTEGRADA: int
    + DEDICADA: int
}

class Recurso {
    - id: Long
    - nome: String
}   

class PlacaVideo {
    - id: Long
    - modelo: String
    - memoriaVideo: String
}

class Processador {
    - id: Long
    - modelo: String
    - velocidade: String
    - memoriaCache: String
}

class Armazenamento {
    - id: Long
    - nome: String
    - capacidade: String
}

class MemoriaRam {
    - id: Long
    - capacidade: String
}

class Tela {
    - id: Long
    - tamanho: String
    - resolucao: String 
    - taxaAtualizacao: String
}

' Especificacao. Informação exclusiva do Notebook. Não pode ser reaproveitada. Se tiver que usar dnv, teria que cadastrar outro.
' Composição: Estou sempre cadastrando se for composição. Deve ser 1 de onde parte a composição
class Especificacao {
    - id: Long
    - altura: String
    - largura: String
    - profundidade: String
    - peso: String
}

class ConexaoSemFio {
    - id: Long
    - nome: String
}

class EntradaSaida { 
    - id: Long
    - nome: String
}

Pedido "1" *--> "*" ItemPedido
Pedido "*" o-left-> "1" Cliente
Pedido "1" *-right-> "*" StatusPedido
StatusPedido "*" -up-> "1" Status
ItemPedido "*" o--> "1" Notebook
ItemPedido "*" o-right-> "1" Cupom
'Cupom "*" --> "1" Fornecedor

Pessoa "1" *--> "*" Endereco
Pessoa "1" *-left-> "*" Telefone
Pessoa "*" --> "1" Sexo
Pessoa "1" --> "1" Usuario

Cliente "1" -left-> "1" Pessoa
Funcionario "1" --> "1" Pessoa
Cliente "*" *--> "*" Notebook: listaDesejo

Endereco "*" o-right-> "1" Cidade
Cidade "*" o-right-> "1" Estado

Notebook "1" *--> "1" Tela
Notebook "*" o--> "1" Processador
Notebook "*" --> "1" TipoPlacaVideo
Notebook "*" o--> "1" PlacaVideo
Notebook "*" o--> "*" Armazenamento
Notebook "*" o--> "*" MemoriaRam
Notebook "1" *--> "1" Especificacao
Notebook "*" o--> "*" Recurso
Notebook "*" o--> "1" Fornecedor
Notebook "*" o--> "*" ConexaoSemFio
Notebook "*" o--> "*" EntradaSaida

Fornecedor "1" *-left-> "*" Telefone

@enduml

'1) Por que preciso do preço no ItemPedidoDTO se já mando o id
' do produto e o desconto pra calcular no back?

'2) Pessoa e Fornecedor tendo muitos telefones e sendo composição,
' usar JoinTable pra criar uma pessoa_telefone e fornecedor_telefone

'3) Lista de desejo: Criar um resource para isso ou colocar no próprio cliente?

'4) Quando passar parâmetro pelo path param? Pois posso pegar o cliente
' a partir do subject com o JsonWebToken (getSubject) e a partir daí pegar
' o cliente

'5) Se excluir um cliente, o pedido será excluido também? Como fica a integridade
' referencial da tabela pedidos ao excluir um cliente?

'6) Pedido ter um histórico de status de andamento

'7) Funcionário poder ter mais de um perfil (Normal ou Adm)

'8) Várias formas de rodar os testes e encaixar permissão: Passando token no header, usando @TestSecurity

'9) Preciso colocar um objeto inteiro de notebook dentro de listaDesejo?

' Arrumar bean validation. Testar cupom e pedido. Organizar melhor pastas. Organizar melhor sequência de métodos
' no resource. Colocar validações de banco para pedido e cupom. Implementar lista desejo. 